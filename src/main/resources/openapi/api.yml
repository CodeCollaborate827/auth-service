openapi: 3.0.3

info:
  title: Auth Service API
  description: Auth Service API
  version: 1.0.0

servers:
  - url: 'http://localhost:8080/api'
    description: 'Local Server'

paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: register
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/login:
    post:
      summary: Login a user
      operationId: login
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/login-oauth:
    post:
      summary: Login a user using OAuth
      operationId: loginOAuth
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/OAuthLoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/verify-email:
    post:
      summary: Verify email
      operationId: verifyEmail
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/VerifyEmailRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerifyEmailResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/resend-verification-email:
    post:
        summary: Resend email verification code
        operationId: resendVerificationEmail
        tags:
            - auth
        requestBody:
          $ref: '#/components/requestBodies/ResendVerificationEmailRequest'
        responses:
            '200':
              description: Email verification code sent successfully
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CommonResponse'
            '400':
              description: Bad Request
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CommonResponse'
            '500':
              description: Internal Server Error
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CommonResponse'
  /auth/forgot-password:
    post:
      summary: Forgot password
      operationId: forgotPassword
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/reset-password:
    post:
      summary: Reset password
      operationId: resetPassword
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/refresh-token:
    post:
      summary: Refresh token
      operationId: refreshToken
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token
                  example: "eyJhbGciO"
      responses:
        '200':
          $ref: '#/components/responses/RefreshTokenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/change-password:
    post:
      summary: Change password
      operationId: change password
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: Old password
                  example: "oldpassword"
                newPassword:
                  type: string
                  description: New password
                  example: "newpassword"
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/check-email-exists:
    get:
      summary: Check if email exists
      operationId: checkEmailExists
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/CheckEmailExistsRequest'
      responses:
        '200':
          $ref: '#/components/responses/CheckEmailExistsResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /auth/check-username-exists:
    get:
      summary: Check if username exists
      operationId: checkUsernameExists
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/CheckUsernameExistsRequest'
      responses:
        '200':
          $ref: '#/components/responses/CheckUsernameExistsResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
components:
  schemas:
    CommonResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Code of the error
          example: "USER12"
        message:
          type: string
          description: Response message
          example: "Operation Success"
        requestId:
          type: string
          description: Unique identifier for the friend request
          example: "req11921"
  requestBodies:
    RegisterRequest:
      description: Register request
      required: true
      content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User email
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: User password
                  example: "password"
                username:
                  type: string
                  description: User username
                  example: "johndoe"
                displayName:
                  type: string
                  description: User display name
                  example: "John Doe"
                avatar:
                  type: string
                  description: User avatar
                  example: "https://example.com/avatar.jpg"
                city:
                  type: string
                  description: user city location
                  example: "Hanoi"
                dateOfBirth:
                  type: string
                  format: date
                  description: User date of birth
                  example: "2002-01-01"
                gender:
                  type: string
                  enum: [male, female, other]
    LoginRequest:
      description: Login request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: User email
                example: "john.doe@gmajl.com"
              password:
                type: string
                description: User password
                example: "password"
              ipAddress:
                type: string
                description: User IP address
                example: "123.123.123.123"
              userAgent:
                type: string
                description: User agent
                example: "Mozilla/5.0"
    OAuthLoginRequest:
      description: OAuth login request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              authorizationCode:
                type: string
                description: Authorization code from OAuth provider
                example: "authorizationCode"
    VerifyEmailRequest:
      description: Verify email request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type of verify email request
                example: "ACCOUNT_REGISTRATION"
              email:
                type: string
                description: User email
                example: "johndoe@example.com"
              verificationCode:
                type: string
                description: "Verification code sent to the user's email"
                example: "212038"
    ForgotPasswordRequest:
      description: Forgot password request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: user email
                example: "john.doe@gmail.com"
    ResetPasswordRequest:
      description: Reset password request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              resetPasswordToken:
                type: string
                description: Token used for reset password
                example: "eyJhbGciOiJIUzM4NCJ9.eyJpcF9hZGRyZXNzIjoiSVBfQUREUkVTUyIsInVzZXJfYWdlbnQiOiJVU0VSX0FHRU5UIiwidXNlcl9pZCI6ImMzN2RiMzBkLWU2N2UtNDJmZC05NDYxLWZiMjY0ZThhYjI2OCIsInN1YiI6ImZvcmV4YW1zMjVAZ21haWwuY29tIiwiaWF0IjoxNzIxNjE0NTMzLCJleHAiOjE3MjE2NTc3MzN9.tCedlChMKbt6S8DcacMZfNiML2zSmK-yCkR2sUpN6a1znDzfvTwu0NgUMeADEPvd"
              newPassword:
                type: string
                description: User new password
                example: "newPassword"
    ResendVerificationEmailRequest:
      description: Resend verification email request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type of email verification
                example: "ACCOUNT_REGISTRATION"
              email:
                type: string
                description: User email
                example: "johndoe@example.com"
    CheckEmailExistsRequest:
      description: Check email exists request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: User email
                example: "johndoe@example.com"
    CheckUsernameExistsRequest:
      description: Check username exists request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: User username
                example: "johndoe"
  responses:
    CheckEmailExistsResponse:
      description: Check email exists response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      isExists:
                        type: boolean
                        description: Email exists or not
                        example: true
    CheckUsernameExistsResponse:
      description: Check username exists response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      isExists:
                        type: boolean
                        description: Username exists or not
                        example: true
    VerifyEmailResponse:
      description: Email verification response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      type:
                        type: string
                        description: Type of email verification
                        example: "ACCOUNT_REGISTRATION"
                      tokens:
                        type: object
                        description: Tokens that can be used for later usage
    ResendVerificationEmailSuccessfulResponse:
      description: Resend verification email successful response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      message:
                        type: string
                        description: Response message
                        example: "Email verification code sent successfully"
                      retryAfterSeconds:
                        type: integer
                        description: Retry after seconds
                        example: 120
    RefreshTokenResponse:
      description: Refresh token response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      accessToken:
                        type: string
                        description: New access token
                        example: "eyJhbGciO"

    LoginResponse:
      description: Email verification response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/CommonResponse'
              - type: object
                properties:
                  data:
                    type: object
                    description: Verification data
                    properties:
                      accessToken:
                        type: string
                        description: Access token
                        example: "eyJhbGciO"
                      refreshToken:
                        type: string
                        description: Refresh token
                        example: "eyJhbGciO"